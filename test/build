#!/usr/bin/env python
import boondep
import os
import random

class SourceFile(boondep.Node):
  def __init__(self, path):
    super(SourceFile, self).__init__()
    self.path = path
  def __repr__(self):
    return "SourceFile({})".format(repr(self.path))

class ToolOutput(boondep.Node):
  def __init__(self, paths, *args, **kwargs):
    super(ToolOutput, self).__init__(*args, **kwargs)
    self.paths = paths
  def __repr__(self):
    return "ToolOutput({})".format(repr(self.paths))

util_h = SourceFile("util.h")
util_c = SourceFile("util.c")
main_c = SourceFile("main.c")

util_o = ToolOutput(["util.o", "util.d"], dependencies=[util_c, util_h])
main_o = ToolOutput(["main.o", "main.d"], dependencies=[main_c, util_h])
binary = ToolOutput(["foo"], dependencies=[util_o, main_o])

graph = boondep.Graph(binary)

traversal = graph.traversal()
while True:
  ready_nodes = traversal.drain_ready_nodes()
  if ready_nodes == None:
    break
  print("")
  for node in ready_nodes:
    done = random.random() < 0.5
    print(repr(node) + ": " + repr(done))
    if done:
      traversal.done_with_node(node)
